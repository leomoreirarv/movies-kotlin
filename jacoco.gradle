apply plugin: 'jacoco'
jacoco {
    toolVersion = "$jacoco_version"
}
project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name
    }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
                def excludes = ['**/R.class',
                                '**/R$*.class',
                                '**/BuildConfig.*',
                                '**/Manifest*.*',
                                '**/*Test*.*',
                                'android/**/*.*',
                                'com/leonardomoreira/study/themovies2/ui/**',
                                'com/leonardomoreira/study/themovies2/di/**',
                                '**/*FSDApp*.*']
                classDirectories = fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: excludes) + fileTree(
                        dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}", excludes: excludes)
                def coverageSourceDirs = ["src/main/java",
                                          "src/$productFlavorName/java",
                                          "src/$buildTypeName/java",
                                          "src/main/kotlin"]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}